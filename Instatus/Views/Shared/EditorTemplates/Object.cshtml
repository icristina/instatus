@helper Field(ModelMetadata prop) {
    var propertyKey = string.Format("{0}.{1}", ViewData.ModelMetadata.ModelType.Name, prop.PropertyName);
    if (prop.AdditionalValues["IsComplexTypeEntity"].AsBoolean()) { // scaffold shared child models
        @Html.Editor(prop.PropertyName)
    }
    else
    {
        <div class="control-group @(ViewContext.ViewData.ModelState.HasError(prop.PropertyName) ? "error" : "") @prop.PropertyName.ToCamelCase()">
            @if (prop.IsReadOnly)
            {
                <b>@prop.GetDisplayName()</b>
                @Html.Display(prop.PropertyName)
            }
            else if (prop.HideSurroundingHtml)
            {
                @Html.Editor(prop.PropertyName)                    
            }
            else
            {
                <label class="control-label">
                    @WebPhrase.Localize(propertyKey + ".Label", prop.GetDisplayName(), false) 
                    @(prop.IsRequired ? " *" : "")             
                </label>                     
                <div class="controls @(prop.Model is System.Collections.IEnumerable ? "list" : "")">
                    @Html.Editor(prop.PropertyName)             
                    @if (ViewContext.ViewData.ModelState.HasError(prop.PropertyName))
                    {
                        <small class="help-inline">@Html.ValidationMessage(prop.PropertyName)</small>
                    }
                    @{
                        var description = WebPhrase.Localize(propertyKey + ".Label", prop.Description, false);
                    }
                    @if (!description.IsEmpty())
                    {
                        <small class="help-inline">
                            @description
                        </small>              
                    }                    
                </div>
            }            
        </div>           
    } 
}

@helper Fieldset(IEnumerable<ModelMetadata> fields) {
    var groupedFields = fields.GroupBy(p => p.AdditionalValues.Value("GroupName").AsString());
    
    if(groupedFields.Count() > 1) 
    {
        foreach (var fieldset in groupedFields) 
        {
            if(!fieldset.Key.IsEmpty()) 
            {
                <fieldset @Html.Attr("id", fieldset.Key.AsString().ToSlug())>
                    <legend>@fieldset.Key</legend>
                    @foreach (var prop in fieldset)
                    {
                        @Field(prop)
                    }
                </fieldset>                                   
            } 
            else 
            {
                foreach (var prop in fieldset)
                {
                    @Field(prop)
                }                
            }       
        }
    }
    else
    {
        foreach (var prop in fields)
        {
            @Field(prop)
        }
    }
}

@{
    var properties = ViewData.ModelMetadata.Properties
                        .Where(prop => prop.ShowForEdit && !ViewData.TemplateInfo.Visited(prop))
                        .Where(prop => !prop.IsComplexType
                            || prop.AdditionalValues["IsScaffoldColumn"].AsBoolean()
                            || prop.AdditionalValues["IsComplexTypeEntity"].AsBoolean() && prop.Model.NonEmpty()
                            || (prop.Model is SelectList && !((SelectList)prop.Model).Items.IsEmpty())
                            || (prop.Model is MultiSelectList && !((MultiSelectList)prop.Model).Items.IsEmpty()));

    var groupedProperties = properties.GroupBy(p => p.AdditionalValues.Value("Category").AsString());   
}     

<div class="model">
    @if (groupedProperties.Count() > 1)
    {
        <ul class="nav nav-tabs">
            @foreach (var group in groupedProperties)
            {
                <li @Html.OptionalAttr("class", "active", groupedProperties.First().Key == group.Key)>
                    <a href="#@group.Key.ToSlug()" data-toggle="tab">@group.Key.ToPascalCase()</a>
                </li>
            }
        </ul>        
        <div class="tab-content">
            @foreach (var group in groupedProperties)
            {
                <div class="tab-pane @(groupedProperties.First().Key == group.Key ? "active" : "")" id="@group.Key.ToSlug()">
                    @Fieldset(group)  
                </div>           
            }
        </div>        
    }
    else
    {
        @Fieldset(properties)
    }
</div>   