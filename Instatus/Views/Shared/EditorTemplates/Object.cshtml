<fieldset>
    @{
        var allowedTypes = new Type[] { typeof(SelectList), typeof(MultiSelectList) };        
    }
    @foreach (var prop in ViewData.ModelMetadata.Properties.Where(pm => pm.ShowForEdit && !ViewData.TemplateInfo.Visited(pm)))
    {
        if(!prop.IsComplexType || prop.AdditionalValues["IsComplexTypeEntity"].AsBoolean() || allowedTypes.Contains(prop.ModelType)) 
        {
            if (prop.IsReadOnly)
            {
                <label>
                    <b>@prop.GetDisplayName()</b>
                    @Html.Display(prop.PropertyName)
                </label>
            }
            else if (prop.HideSurroundingHtml)
            {
                @Html.Editor(prop.PropertyName)                    
            }
            else
            {
                <label>
                    @if (!prop.GetDisplayName().IsEmpty())
                    {
                        <b>
                            @prop.GetDisplayName() 
                            @(prop.IsRequired ? "*" : "")
                        </b>
                    }                
                </label> 
                    
                @Html.Editor(prop.PropertyName) 
            
                if (ViewContext.ViewData.ModelState[prop.PropertyName] != null && ViewContext.ViewData.ModelState[prop.PropertyName].Errors != null)
                {
                    <br />
                    @Html.ValidationMessage(prop.PropertyName)  
                }

                if (!prop.Description.IsEmpty())
                {
                    <br />
                    <small>@prop.Description</small>              
                }
            }
        }
    }
</fieldset>