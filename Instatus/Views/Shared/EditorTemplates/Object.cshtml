@helper Field(ModelMetadata prop) {
    <div class="control-group @(ViewContext.ViewData.ModelState.HasError(prop.PropertyName) ? "error" : "")">
        @if (prop.IsReadOnly)
        {
            <b>@prop.GetDisplayName()</b>
            @Html.Display(prop.PropertyName)
        }
        else if (prop.HideSurroundingHtml)
        {
            @Html.Editor(prop.PropertyName)                    
        }
        else
        {
            <label class="control-label">
                @if (!prop.GetDisplayName().IsEmpty())
                {
                    @prop.GetDisplayName() 
                    @(prop.IsRequired ? " *" : "")
                }                
            </label>                     
            <span class="controls">
                @Html.Editor(prop.PropertyName)             
                @if (ViewContext.ViewData.ModelState.HasError(prop.PropertyName))
                {
                    @Html.ValidationMessage(prop.PropertyName)
                }
                @if (!prop.Description.IsEmpty())
                {
                    <small>@prop.Description</small>              
                }                    
            </span>
        }            
    </div>    
}

<fieldset>
    @{
        var properties = ViewData.ModelMetadata.Properties
                            .Where(prop => prop.ShowForEdit && !ViewData.TemplateInfo.Visited(prop))
                            .Where(prop => !prop.IsComplexType
                                || prop.AdditionalValues["IsScaffoldColumn"].AsBoolean()
                                || prop.AdditionalValues["IsComplexTypeEntity"].AsBoolean()
                                || (prop.Model is SelectList && !((SelectList)prop.Model).Items.IsEmpty()));

        var groupedProperties = properties.GroupBy(p => p.AdditionalValues["Category"].AsString());   
    }        
    @if (groupedProperties.Count() > 1)
    {
        <ul class="nav nav-tabs">
            @foreach (var group in groupedProperties)
            {
                <li @Html.OptionalAttr("class", "active", groupedProperties.First().Key == group.Key)>
                    <a href="#@group.Key.ToSlug()" data-toggle="tab">@group.Key.ToPascalCase()</a>
                </li>
            }
        </ul>        
        <div class="tab-content">
            @foreach (var group in groupedProperties)
            {
                <div class="tab-pane @(groupedProperties.First().Key == group.Key ? "active" : "")" id="@group.Key.ToSlug()">
                    @foreach (var prop in group)
                    {
                        @Field(prop)
                    }     
                </div>           
            }
        </div>        
    }
    else
    {
        foreach (var prop in properties)
        {
            @Field(prop)
        }
    }
</fieldset>