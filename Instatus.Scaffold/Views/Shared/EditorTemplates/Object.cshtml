@{
    var properties = ViewData.ModelMetadata.Properties
                        .Where(prop => prop.ShowForEdit && !ViewData.TemplateInfo.Visited(prop));    
}

@foreach (var prop in properties)
{
    var hasModelStateError = ViewContext.ViewData.ModelState.Any(m => m.Key == prop.PropertyName) 
        && ViewContext.ViewData.ModelState[prop.PropertyName].Errors != null
        && ViewContext.ViewData.ModelState[prop.PropertyName].Errors.Count > 0;  
    <div class="control-group 
        @(hasModelStateError ? "error" : string.Empty) 
        @prop.PropertyName.ToLower()">
        @if (prop.IsReadOnly)
        {
            <b>@prop.GetDisplayName()</b>
            @Html.Display(prop.PropertyName)
        }
        else if (prop.HideSurroundingHtml)
        {
            @Html.Editor(prop.PropertyName)                    
        }
        else
        {
            <label class="control-label">
                @prop.GetDisplayName()
                @if(prop.IsRequired) {
                    <span class="required">*</span> 
                }            
            </label>                     
            <div class="controls">
                @Html.Editor(prop.PropertyName)             
                @if (hasModelStateError)
                {
                    <p class="alert alert-block">
                        @Html.ValidationMessage(prop.PropertyName)
                    </p>
                }
                @if (!string.IsNullOrWhiteSpace(prop.Description))
                {
                    <p class="help-block">
                        @prop.Description
                    </p>              
                }                    
            </div>
        }            
    </div>     
}